generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(cuid())
  name                String
  email               String                @unique
  token               String?
  password            String
  role                Role                  @default(User)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  problemsSolved      String[]              @default([])
  skills              String[]
  username            String?               @unique
  github              String?
  linkedin            String?
  bio                 String?
  extraURL            String?
  avatar              String?
  contests            Contest[]             @relation("UserContests")
  contestParticipants ContestParticipants[]
  problems            Problem[]             @relation("UserProblems")
  submissions         Submission[]          @relation("UserSubmissions")
}

model Problem {
  id                String           @id @default(cuid())
  userId            String
  title             String
  description       String
  resourcesPath     String[]
  constraints       String
  difficulty        Difficulty
  ownerCode         String
  contestId         String?
  topics            String[]
  companies         String[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  inputFormat       String
  outputFormat      String
  ownerCodeLanguage Int
  contestProblems   ContestProblem[]
  user              User             @relation("UserProblems", fields: [userId], references: [id], onDelete: Cascade)
  queries           QueryTable[]
  submissions       Submission[]
  testcases         Testcase[]
}

model Topic {
  id         String       @id @default(cuid())
  name       String
  queryTopic QueryTable[]
}

model Company {
  id           String       @id @default(cuid())
  name         String
  queryCompany QueryTable[]
}

model Testcase {
  id             String              @id @default(cuid())
  problemId      String
  inputPath      String
  expOutputPath  String
  isExample      Boolean             @default(false)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  submittedTests SubmittedTestcase[]
  problem        Problem             @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Submission {
  id                 String              @id @default(cuid())
  problemId          String
  userId             String
  userCode           String
  language           Int
  totalTestcases     Int
  evaluatedTestcases Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  memory             Float               @default(0)
  time               Float               @default(0)
  acceptedTestcases  Int                 @default(0)
  status             Int                 @default(2)
  problem            Problem             @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user               User                @relation("UserSubmissions", fields: [userId], references: [id], onDelete: Cascade)
  submittedTests     SubmittedTestcase[]
}

model SubmittedTestcase {
  id           String     @id @default(cuid())
  testcaseId   String
  submissionId String
  status       Int        @default(1)
  output       String?
  time         Float?
  memory       Float?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  testcase     Testcase   @relation(fields: [testcaseId], references: [id], onDelete: Cascade)
}

model QueryTable {
  id         String     @id @default(cuid())
  problemId  String
  topicId    String
  companyId  String
  difficulty Difficulty
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  company    Company    @relation(fields: [companyId], references: [id])
  problem    Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  topic      Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model Contest {
  id                  String                @id @default(cuid())
  title               String
  description         String
  status              ContestStatus         @default(Upcoming)
  problems            String[]
  startTime           DateTime              @default(now())
  userId              String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  endTime             DateTime              @default(now())
  jobIds              Json                  @default("{}")
  createdBy           User                  @relation("UserContests", fields: [userId], references: [id], onDelete: Cascade)
  contestParticipants ContestParticipants[]
  contestProblems     ContestProblem[]
}

model ContestProblem {
  id        String   @id @default(uuid())
  contestId String
  problemId String
  score     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model ContestParticipants {
  id             String   @id @default(uuid())
  contestId      String
  userId         String
  score          Float    @default(0)
  rank           Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  problemsSolved String[] @default([])
  contest        Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  Admin
  User
  Organiser
}

enum Difficulty {
  Easy
  Medium
  Hard
}

enum ContestStatus {
  Upcoming
  Ongoing
  Ended
}
